#!/bin/bash
set -e -x

check_version() {
    if [ -z "$VERSION" ]; then
        echo "RANCHEROS_VERSION must be set"
        exit 1
    fi
}

PACKER_BUILDER_TYPE=${PACKER_BUILDER_TYPE:?"PACKER_BUILDER_TYPE is not set"}

echo "type: $PACKER_BUILDER_TYPE"
echo "name: $PACKER_BUILD_NAME"
env
echo "----------------------------------------"

case $PACKER_BUILD_NAME in

    "amazon-rancher")
        echo "building amazon-rancher"
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  resize_device: /dev/xvda
  services_include:
    rancher-server: true
  docker:
    engine: docker-1.12.6
EOF
        check_version
        sudo system-docker run --volumes-from=user-volumes --net=host --privileged rancher/os:${VERSION} -d /dev/xvda -t amazon-ebs-hvm -c $(pwd)/cloud-config.yml --no-reboot --debug -p /dev/xvda1 --append "rancher.cloud_init.datasources=[\"ec2\"]"
        exit 0
        ;;

    "amazon-ebs-ecs")
        echo "building amazon-ebs-ecs"
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  services_include:
    amazon-ecs-agent: true
  modules: [ena]
EOF
        check_version
        sudo system-docker run --volumes-from=user-volumes --net=host --privileged rancher/os:${VERSION} -d /dev/xvda -t amazon-ebs-hvm -c $(pwd)/cloud-config.yml --no-reboot --debug -p /dev/xvda1 --append "rancher.cloud_init.datasources=[\"ec2\"]"
        exit 0
        ;;

    "aliyun-ecs")
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  resize_device: /dev/vda
EOF
        echo "building aliyun-ecs"
        sudo ros install -d /dev/sda -c $(pwd)/cloud-config.yml --no-reboot --debug --append "rancher.hypervisor_service=false rancher.autologin=tty1 rancher.cloud_init.datasources=[\"aliyun\"]"
        exit 0
        ;;

    "azure")
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  resize_device: /dev/sda
EOF
        echo "building azure"
        sudo ros install -d /dev/sda -c $(pwd)/cloud-config.yml --no-reboot --debug --append "rancher.autologin=tty1 console=ttyS0 earlyprintk=ttyS0 rootdelay=300"
        exit 0
        ;;

    "cloudstack")
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  resize_device: /dev/vda
EOF
        echo "building cloudstack"
        sudo ros install -d /dev/sda -c $(pwd)/cloud-config.yml --no-reboot --debug --append "console=tty1 console=ttyS0,115200n8 rancher.cloud_init.datasources=[\"cloudstack\"] rancher.autologin=tty1 rancher.autologin=ttyS0"
        exit 0
        ;;

    "digitalocean")
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  resize_device: /dev/vda
EOF
        echo "building digitalocean"
        sudo ros install -d /dev/sda -c $(pwd)/cloud-config.yml --no-reboot --debug --append "console=tty1 printk.devkmsg=on notsc clocksource=kvm-clock rancher.network.interfaces.eth0.ipv4ll rancher.cloud_init.datasources=[\"digitalocean\"] rancher.autologin=tty1 rancher.autologin=ttyS0"
        exit 0
        ;;

    "openstack")
        echo "building openstack"
        sudo ros install -d /dev/sda --no-reboot --debug --append "console=tty1 console=ttyS0,115200n8 printk.devkmsg=on rancher.autologin=ttyS0"
        exit 0
        ;;

    "qemu-googlecompute")
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  resize_device: /dev/sda
  docker:
    extra_args: [--mtu, 1460]
  system_docker:
    extra_args: [--mtu, 1460]
EOF
        sudo ros install -d /dev/sda -c $(pwd)/cloud-config.yml --no-reboot --debug --append "console=ttyS0 rancher.autologin=ttyS0 printk.devkmsg=on rancher.cloud_init.datasources=[\"gce\"]"
        exit 0
        ;;

    "pingan-ecs")
        cat >cloud-config.yml<<EOF
#cloud-config
write_files:
  - path: /etc/rc.local
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash
      METADATA_SERVER="100.68.11.8"
      CONF_FILE="/etc/ssh/sshd_config"
      for _ in {1..10};do
        ping -c 2 -W 1 \$METADATA_SERVER > /dev/null 2>&1
        if [[ \$? -eq 0 ]];then
          wget -O /tmp/password http://\$METADATA_SERVER/latest/meta-data/password
          break
        else
          sleep 1
          echo "\`date "+%Y-%m-%d %H:%M:%S"\` level=warning msg=\"METADATA_SERVER \$METADATA_SERVER connection failed!\""> /dev/tty0
        fi
      done

      # Because /etc/shadow is not a persistent file
      if [[ -s /tmp/password  ]];then
        echo root:\`cat /tmp/password\`|chpasswd
        cp /etc/shadow /usr/share/ros/shadow.bak
        rm /tmp/password
      else
        cp /usr/share/ros/shadow.bak /etc/shadow
      fi
      # Allow root user login
      sed -i 's/^PermitRootLogin.*$/PermitRootLogin yes/g' \$CONF_FILE
      sed -i 's/^AllowGroups.*$//g' \$CONF_FILE

      pingan_amc_status=\`ros s list | grep pingan-amc | awk '{print \$1}'\`
      if [[  \$pingan_amc_status != "enabled" ]];then
        ros s enable pingan-amc
        ros s up pingan-amc
      fi
EOF
        echo "building pingan-ecs"
        sudo ros install -d /dev/sda -c $(pwd)/cloud-config.yml --no-reboot --debug --append "console=tty1 console=ttyS0,115200n8 printk.devkmsg=on rancher.autologin=ttyS0"
        exit 0
        ;;

esac

case ${PACKER_BUILDER_TYPE} in

    "virtualbox-iso")
        cat >vagrant.yml<<EOF
#cloud-config
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
EOF
        sudo ros install -d /dev/sda -f -c ./vagrant.yml --no-reboot
        ;;

    "amazon-ebs")
        echo "building amazon-ebs"
        cat >cloud-config.yml<<EOF
#cloud-config
rancher:
  modules: [ena]
EOF
        check_version
        sudo system-docker run --volumes-from=user-volumes --net=host --privileged rancher/os:${VERSION} -d /dev/xvda -t $PACKER_BUILD_NAME -c $(pwd)/cloud-config.yml --no-reboot --debug -p /dev/xvda1 --append "rancher.cloud_init.datasources=[\"ec2\"]"
        ;;

    *)
        echo "Unknown type" 1>&2
        exit 1
        ;;
esac
